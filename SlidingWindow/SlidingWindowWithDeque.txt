
so this is super fascinating algo that i absouletly love and is dreaming of mastering it on day 

Now let's talk about the technique 
1. you use this technique whenever you have to track anything in windows
    for example: maximum in each window
    so let's try to solve this problem

        Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
        Output: [3,3,5,5,6,7]
        Explanation: 
        Window position                Max
        ---------------               -----
        [1  3  -1] -3  5  3  6  7       3
         1 [3  -1  -3] 5  3  6  7       3
         1  3 [-1  -3  5] 3  6  7       5
         1  3  -1 [-3  5  3] 6  7       5
         1  3  -1  -3 [5  3  6] 7       6
         1  3  -1  -3  5 [3  6  7]      7   

     we have given the nums and we have to return the res (int[] array) of maxValue's of each window
        (this is static window problem also)

2. this algo is super efficient than queue 
3. whenever you get the hint in slidingwindow that you have to use the queue you could most prolly use the deque "most prolly"

let's do the problem's 
1. SlidingWindowMaximum
2. Shortest Subarray with sum at LEAST k
    DESC: Given an integer array nums and an integer k, return the length of the shortest 
    non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.
    A subarray is a contiguous part of an array.

    Now how will we do this ?
    Input: nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3
    Output: 1 (3) or any number > 3 in nums


